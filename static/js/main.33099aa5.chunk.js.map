{"version":3,"sources":["components/HexInput.jsx","components/Header.jsx","components/Container.jsx","App.js","index.js"],"names":["HexInput","props","value","onChange","event","currentTarget","maxLength","type","className","placeholder","Header","header","defaultProps","Container","state","error","hexColor","rgbColor","convert","hex","exec","shift","map","i","parseInt","join","test","slice","length","this","setState","prevState","checkColor","fixColor","style","backgroundColor","changeColor","bind","Component","App","ReactDOM","render","document","getElementById"],"mappings":"2NAmBeA,EAjBE,SAAAC,GAKf,OACE,2BACEC,MAAOD,EAAMC,MACbC,SAPJ,SAAkBC,GAChBH,EAAME,SAASC,EAAMC,cAAcH,QAOjCI,UAAW,EACXC,KAAK,OACLC,UAAU,YACVC,YAAY,aCXH,SAASC,EAAOT,GAAQ,IAC7BU,EAAWV,EAAXU,OACR,OACE,wBAAIH,UAAU,UAAUG,GAI5BD,EAAOE,aAAe,CACpBD,OAAQ,6B,ICNWE,E,kDACnB,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXC,OAAO,EACPC,SAAUf,EAAMe,SAChBC,SAAU,EAAKC,QAAQjB,EAAMe,WALd,E,oDASXG,GACN,IAAIF,EAAW,4CAA4CG,KAAKD,GAChE,OAAKF,GAILA,EAASI,QACFJ,EAAQ,cAAUA,EAASK,KAAI,SAAAC,GAAC,OAAIC,SAASD,EAAG,OAAKE,KAAK,MAAlD,KAA6D,MAJnE,O,iCAOAT,GACT,MAAO,oBAAoBU,KAAKV,K,+BAGzBA,GACP,MAAuB,MAAhBA,EAAS,GAAaA,EAASW,MAAM,EAAG,GAAxC,WAAiDX,EAASW,MAAM,EAAG,M,kCAGhEX,GACc,IAApBA,EAASY,OACXC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bf,WACAD,MAAOgB,EAAUhB,MACjBE,SAAUc,EAAUd,aAEbY,KAAKG,WAAWhB,IACzBA,EAAWa,KAAKI,SAASjB,GACzBa,KAAKC,SAAS,CACZd,WACAD,OAAO,EACPE,SAAUY,KAAKX,QAAQF,MAGzBa,KAAKC,SAAS,CACZf,OAAO,EACPC,SAAUa,KAAKI,SAASjB,GACxBC,SAAU,4C,+BAMd,IAAMhB,EAAQ,GAUd,OARI4B,KAAKf,MAAMC,MACbd,EAAMO,UAAY,QAElBP,EAAMiC,MAAQ,CACZC,gBAAiBN,KAAKf,MAAMG,UAK9B,2BAAYhB,EACV,kBAACS,EAAD,MACA,kBAAC,EAAD,CAAUR,MAAO2B,KAAKf,MAAME,SAAUb,SAAU0B,KAAKO,YAAYC,KAAKR,QACtE,yBAAKrB,UAAU,aAAaqB,KAAKf,MAAMG,e,GAlERqB,a,MCOxBC,MARf,WACE,OACE,yBAAK/B,UAAU,OACf,kBAAC,EAAD,CAAWQ,SAAS,cCHxBwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.33099aa5.chunk.js","sourcesContent":["import React from 'react';\n\nconst HexInput = props => {\n  function onChange(event) {\n    props.onChange(event.currentTarget.value);\n  }\n\n  return (\n    <input\n      value={props.value}\n      onChange={onChange}\n      maxLength={7}\n      type=\"text\"\n      className=\"hex-input\"\n      placeholder=\"#000000\"\n    />\n  );\n};\n\nexport default HexInput;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Header(props) {\n  const { header } = props;\n  return (\n    <h1 className=\"header\">{header}</h1>\n  );\n}\n\nHeader.defaultProps = {\n  header: 'Convert HEX colors to RGB'\n};\n\nHeader.propTypes = {\n  header: PropTypes.string\n};","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport HexInput from \"./HexInput\";\nimport Header from './Header';\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      hexColor: props.hexColor,\n      rgbColor: this.convert(props.hexColor)\n    };\n  }\n\n  convert(hex) {\n    let rgbColor = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!rgbColor) {\n      return null;\n    }\n\n    rgbColor.shift();\n    return rgbColor ? `rgb(${rgbColor.map(i => parseInt(i, 16)).join(\", \")})` : null;\n  }\n\n  checkColor(hexColor) {\n    return /^#?([\\da-f]{6})$/i.test(hexColor);\n  }\n\n  fixColor(hexColor) {\n    return hexColor[0] === \"#\" ? hexColor.slice(0, 7) : `#${hexColor.slice(0, 6)}`;\n  }\n\n  changeColor(hexColor) {\n    if (hexColor.length !== 7) {\n      this.setState(prevState => ({\n        hexColor,\n        error: prevState.error,\n        rgbColor: prevState.rgbColor\n      }));\n    } else if (this.checkColor(hexColor)) {\n      hexColor = this.fixColor(hexColor);\n      this.setState({\n        hexColor,\n        error: false,\n        rgbColor: this.convert(hexColor)\n      });\n    } else {\n      this.setState({\n        error: true,\n        hexColor: this.fixColor(hexColor),\n        rgbColor: \"Ошибка!\"\n      });\n    }\n  }\n\n  render() {\n    const props = {};\n\n    if (this.state.error) {\n      props.className = \"error\";\n    } else {\n      props.style = {\n        backgroundColor: this.state.rgbColor\n      };\n    }\n\n    return (\n      <figure {...props}>\n        <Header />\n        <HexInput value={this.state.hexColor} onChange={this.changeColor.bind(this)} />\n        <div className=\"rgb-color\">{this.state.rgbColor}</div>\n      </figure>\n    );\n  }\n}\n\nContainer.propTypes = {\n  hexColor: PropTypes.string.isRequired,\n};","import React from 'react';\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Container hexColor=\"#34495e\" />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}